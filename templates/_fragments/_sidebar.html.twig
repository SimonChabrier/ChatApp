<aside>
<div>
<h2>Chats</h2>
</div>

<div>
    <ul class ="user_connected_list"></ul>
</div>


<div>
{% if all_channels.getAllChannels() is not empty %}
<ol>
{% for channel in all_channels.getAllChannels() %}
    <li>
        <a href="{{ path('app_channel_show', {'id': channel.id}) }}">{{ channel.name }}</a>
        <span id="notifIcon"></span> 
        {# on prepare une span pour le nombre de notif...à gèrer en js 
        et renvoyer les notifs depuis le controller...#}
    </li>
{% endfor %}
{% else %}
    <li>
        <a href="{{ path('app_channel_new') }}">Créer un nouveau chat</a>
    </li>
{% endif %}
</ol>
</div>
</aside>

{% block javascripts %}

<script>
    const topicslink = new URL('https://mercure.simschab.cloud/.well-known/mercure');
    topicslink.searchParams.append('topic', encodeURIComponent('user_connected'));
    topicslink.searchParams.append('topic', encodeURIComponent('user_disconnected'));

    console.log(topicslink);

    const usersEventSource = new EventSource(topicslink);


    const usersConnectedList = document.querySelector('.user_connected_list');
    console.log(usersConnectedList);

    usersEventSource.onmessage = (e) => {
        const data = JSON.parse(e.data);
        console.log(data);
        if (data.status === 'online') {
            const li = document.createElement('li');
            li.textContent = data.username + ' : ' + data.status;
            li.dataset.id = data.user_id;
            usersConnectedList.appendChild(li);
        } else if (data.status === 'offline') {
            const li = usersConnectedList.querySelector(`li[data-id="${data.user_id}"]`);
            li.remove();
        }
    };

    /////////////////

///////// 1 on crée un topic mercure pour liter les utilisateurs qui se connecte et un topic pour écouter les utilisateurs qui se déconnectent en utilisant un id //////







</script>


{% endblock %}

