<aside>
<div>
    <h2>ChatRooms</h2>
</div>

{# on ajoute la liste des utilisateurs connectés #}
<div class="mb-3">
{% if twig_globals.getGlobals()['online_users'] is not empty %}
    <ul class ="user_connected_list">
    {% for online_user in twig_globals.getGlobals()['online_users'] %}
        <li data-id={{ online_user.id  }}>{{ online_user.username }} : online</li>
    {% endfor %}
    {% else %}
    <li>
        Aucun utilisateur connecté
    </li>
{% endif %}
    </ul>
</div>


<div>
{% if twig_globals.getGlobals()['all_channels'] is not empty %}
    <ul class="notifList">
    {% for channel in twig_globals.getGlobals()['all_channels'] %}
        <li>
            <a href="{{ path('app_channel_show', {'id': channel.id}) }}">{{ channel.name }}</a>
            <span class="notifCount" id="notifCount_{{ channel.id }}" data-count=0></span>
            {# on prepare une span pour le nombre de notif...à gèrer en js 
            et renvoyer les notifs depuis le controller...#}
        </li>
    {% endfor %}
    {% else %}
        <li>
            <a href="{{ path('app_channel_new') }}">Créer un nouveau chat</a>
        </li>
    {% endif %}
    </ul>
</div>
</aside>


{% if app.user is defined and app.user is not null %}

{% block javascripts %}
<script>

    ///////////////// On crée les topics privés pour chaque utilisateur connecté ///////////////////////
    function createPrivateChatsLinks(){
        // On récupère la liste d'utilisateurs connectés dans le DOM
        const userList = document.querySelectorAll('.user_connected_list li');

        // On crée un lien de topic privé pour chaque utilisateur connecté avec son id
        let privateTopicsLinks = [];
        userList.forEach((user) => {
        let link = new URL('https://mercure.simschab.cloud/.well-known/mercure/');
        link.searchParams.append('private-chat', encodeURIComponent(user.dataset.id));
        privateTopicsLinks.push(link);
        });
        console.log(privateTopicsLinks);
        return privateTopicsLinks;
    }

    /////////////////
    const topicslink = new URL('https://mercure.simschab.cloud/.well-known/mercure');
    topicslink.searchParams.append('topic', encodeURIComponent('user_connected'));
    topicslink.searchParams.append('topic', encodeURIComponent('user_disconnected'));
    
    // on ajoute les topics privés pour chaque utilisateur connecté
    createPrivateChatsLinks();
    
    // on peut imaginer ajouter d'autres topics pour les messages, les channels, etc...    
    const usersEventSource = new EventSource(topicslink);
    const usersConnectedList = document.querySelector('.user_connected_list');
    /// notification des utilisateurs connectés ou déconnectés
    usersEventSource.onmessage = (e) => {
        
        
        const data = JSON.parse(e.data);
        console.log(data);
        if (data.status === 'online') {

            // cause we have boot a request from users status in database to not clear list on page change 
            // and a direct request from mercure to update the list when a user connect or disconnect
            // check fist if the user is already in the list for not adding it twice in the list

            // si on change de page ou en arrivant sur l'interface on va avoir la liste des utilisateurs connectés via la varibale globale twig et la requete en bdd
            // donc on ne veut pas faire de doublon avec la liste des utilisateurs qui se connectent et aussi ne pas perdre les utilisateurs qui se connectent si on change de page...
            const liAlreadyInList = usersConnectedList.querySelector(`li[data-id="${data.user_id}"]`);
            if (liAlreadyInList) {
                return;
            }

            const li = document.createElement('li');
            li.textContent = data.username + ' : ' + data.status;
            li.dataset.id = data.user_id;
            usersConnectedList.appendChild(li);

            // on met à jour les topics privés à chaque fois qu'un utilisateur se connecte
            createPrivateChatsLinks();

        } else if (data.status === 'offline') {

            const li = usersConnectedList.querySelector(`li[data-id="${data.user_id}"]`);
            li.remove();

            // on met à jour les topics privés à chaque fois qu'un utilisateur se déconnecte
            createPrivateChatsLinks();
        }
    };

///////////////// Channels notifications using mercure in a loop on all channels ////////////////

// get id from url to know which channel is currently displayed
{% if app.request.get('id') is not null %}
    const currentChannelId = {{ app.request.get('id') }};
{% else %}
    const currentChannelId = null;
{% endif %}

{% if twig_globals.getGlobals()['all_channels'] is not empty %}

{% for channel in twig_globals.getGlobals()['all_channels'] %}
    // Est ce que le channel actuellement affiché est différent de celui de la boucle ?
    if ({{ channel.id }} !== currentChannelId || currentChannelId === null) {
        // on ajoute un event source pour chaque channel différent de celui actuellement affiché
        const notifSource{{ channel.id }} = new EventSource('https://mercure.simschab.cloud/.well-known/mercure?topic=channel/{{ channel.id }}');
        // on récupère la span qui contiendra le nombre de notif
        const notifCount{{ channel.id }} = document.getElementById('notifCount_{{ channel.id }}');
        
        // on écoute les messages envoyés par mercure
        notifSource{{ channel.id }}.onmessage = (event) => {
            const data = JSON.parse(event.data);
            let count = parseInt(notifCount{{ channel.id }}.getAttribute('data-count')) || 0;
            // on incrémente le nombre de notif avec la valeur retournée par mercure à la clé count
            count += 1;
            notifCount{{ channel.id }}.textContent = count;
            notifCount{{ channel.id }}.setAttribute('data-count', count);
            notifCount{{ channel.id }}.classList.remove('hideElement');
            // on stocke le nombre de notif dans le local storage pour pouvoir le récupérer si on change de page
            localStorage.setItem('notifCount_{{ channel.id }}', count);
        };
    }
{% endfor %}
{% endif %}

// on récupère le nombre de notif stocké dans le local storage pour l'afficher si on change de page

{% for channel in twig_globals.getGlobals()['all_channels'] %}
    let notifCount{{ channel.id }} = document.getElementById('notifCount_{{ channel.id }}');
    if (notifCount{{ channel.id }} !== null) {
        let totalNotifCount = parseInt(localStorage.getItem('notifCount_{{ channel.id }}')) || 0;
        let eventSourceNotifCount = parseInt(notifCount{{ channel.id }}.getAttribute('data-count')) || 0;
        let currentNotifCount = totalNotifCount - eventSourceNotifCount;
        
        if (currentNotifCount > 0) {
            notifCount{{ channel.id }}.textContent = currentNotifCount;
            notifCount{{ channel.id }}.classList.remove('hideElement');
        } else {
            notifCount{{ channel.id }}.textContent = '';
            notifCount{{ channel.id }}.classList.add('hideElement');
        }
    }
{% endfor %}

// on met le compteur du channel à 0 quand l'utilisateur clique sur le lien du channel
const channelLinks = document.querySelectorAll('a[href*="channel"]');

channelLinks.forEach((link) => {
    link.addEventListener('click', (e) => {
        const notifCount = e.target.nextElementSibling; // le span qui contient le nombre de notif
        // on met le compteur du channel à 0 dans le local storage au clic sur le lien du channel
        notifCount.setAttribute('data-count', 0);
        localStorage.setItem(notifCount.id, 0);
        notifCount.textContent = '';
        notifCount.classList.add('hideElement');
    });
});





</script>


{% endblock %}


{% endif %}