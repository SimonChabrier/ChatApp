{# ici je peux utiliser une balise template ça s'y prête bien #}
<div id="chatBox">
    <span id="closeChatBox">X</span>
    <div id="chatBoxBody"></div>
    <div class="inputBlock">
        <input id="chatBoxInput" type="text">
        <button id="sendPrivateMessage" class="btn btn-sm btn-success" type="submit">Send</button>
    </div>
</div>

{% if app.user %}

{% block javascripts %}
<script>


///////////////// GESTION AFFICHAGE DU CHAT /////////////////////

function displayChatBox(data) {
    const chatBox = document.getElementById('chatBox');
    console.log('on affiche la chatbox');
    //chatBox.dataset.conversationId = data.conversation.id;
    //for(let i = 0; i < data.conversation.users.length; i++) {
        //on ajoute les Id des participants à la conversation dans le dataset de la chatbox
      //  chatBox.dataset[`user${i+1}Id`] = data.conversation.users[i].id;
    //}
    //chatBox.dataset.user1Id = data.conversation.users[0].id;
    //chatBox.dataset.user2Id = data.conversation.users[1].id;
    
    chatBox.style.display = 'block';
    for (opacity = 0; opacity < 1.1; opacity = opacity + 0.1) {           
        setTimeout(function(){chatBox.style.opacity = opacity;},150)                       
    } 
    
    // on autorise la fermeture de la chatbox
    closeChatBox();
}

function closeChatBox() {
    
    const chatBox = document.getElementById('chatBox');
    
    document.getElementById('closeChatBox').addEventListener('click', (e) => {
        
        if (e.target.id === 'closeChatBox') {
            for (let opacity = 1; opacity > -0.1; opacity -= 0.1) {           
                setTimeout(() => {
                    chatBox.style.opacity = opacity;
                }, 150);
            } 
            setTimeout(() => {
                chatBox.style.display = 'none';
            }, 150);
        }
    });
}

function createNewMessageSpan (data) {

    const chatBoxBody = document.getElementById('chatBoxBody');

    const span = document.createElement('span');

    span.classList.add('private_message');

        if (data.author_id === {{ app.user.id }}) {
            span.style.float = 'right';
            span.style.backgroundColor = '#cbffd6';
        } else {
            span.style.float = 'left';
        }

    // on ajoute les données retournées par Mercure dans la réponse sur le DOM
    span.innerText = `${data.message}`;
    chatBoxBody.appendChild(span, chatBoxBody.lastElementChild); 
}



//////// EN COURS DE DEV NOTIF PRIVEE //////////

///////////////// On crée les topics privés pour chaque utilisateur connecté ///////////////////////


document.addEventListener('DOMContentLoaded', (evt) => {
    console.log('DOM chargé');

    //* 0 - on récupère l'id de l'utilisateur connecté en session pour l'utiliser dans les topics privés
    const appUser = {{ app.user.id }};
    const appUserName = '{{ app.user.username}}';
    console.log(appUser);
    console.log(appUserName);
    
    //* 1 - on crée la liste potentielle de tous les topics qui peuvent exister en fonction des utilisateurs connectés.

    const topics = [];
    // On récupère la liste d'utilisateurs connectés dans le DOM
    const connectedUsers = document.querySelectorAll('.connectedUser');
    // on récupère le data-set de chaque utilisateur connecté
    connectedUsers.forEach((user) => {
        // on récupère l'id de l'utilisateur sur l'attibut data-id de chaque utilisateur de la liste
        const userId = user.getAttribute('data-id');
        // on crée un topic privé pour chaque utilisateur connecté
        const topic = `private-conversation=${userId}`;
        // on ajoute le topic à la liste des topics privés
        topics.push(topic);
    });

    //* 2 - On abonne chaque utilisateur en seesion au topic privé qui le concerne

    const userTopicLink = topics.filter((topic) => {
        // on filtre la liste des topics pour ne garder que ceux qui concernent l'utilisateur connecté
        const regex = new RegExp(`^private-conversation=${appUser}$`);
        return regex.test(topic);
    });

    console.log(userTopicLink);

    //* 3 - On crée la souscription de l'utilisateur à son topic privé
    const link = 'https://mercure.simschab.cloud/.well-known/mercure';
    const url = new URL(link);
    url.searchParams.append('topic', `${userTopicLink}`);
    const eventSource = new EventSource(url);

    // On écoute les messages reçus du hub
    eventSource.onmessage = e => {
        console.log(e.data);
        displayChatBox(e.data);
    };


    // on écoute le clic sur chaque utilisateur connecté pour poster un message privé à cet utilisateur sur son topic privé
    connectedUsers.forEach((user) => {
        console.log(user);
        
        user.addEventListener('click', (e) => {

        e.preventDefault();

        // on récupère l'id de l'utilisateur cliqué
        const userId = user.getAttribute('data-id');
        
        // on prépare le message à envoyer
        const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiKiJdLCJzdWJzY3JpYmUiOlsiKiJdfX0.nINXJPMGL7u4vvquYYm3zgMosrqrxTSooTs7R_OJLZA';
        const data = {
            // on récupère l'id de l'utilisateur cliqué qui correspond au topic privé auquel cet utilisateur est abonné
            topic: `private-conversation=${userId}`,
            message: `Message reçu de l\'utilisateur : ${appUserName}`,
        };

            // on poste un message privé à l'utilisateur cliqué via mercure qui recevra la notification
            fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': 'Bearer ' + `${TOKEN}` 
                },
            body: `data=${encodeURIComponent(data.message)}&topic=${encodeURIComponent(data.topic)}` // envoyer le message et le topic pour le publier sur le hub et le diffuser aux abonnés
            //body: "message privé" // envoyer le message et le topic pour le publier sur le hub et le diffuser aux abonnés
            })
            .then(response => response.text())
            .then(data => {
                console.log(data);
            })
            .catch(error => console.log(error));
            });
        });
    });


function notifyParticipant(userId, conversationId) {

    const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiKiJdLCJzdWJzY3JpYmUiOlsiKiJdfX0.nINXJPMGL7u4vvquYYm3zgMosrqrxTSooTs7R_OJLZA'

  const data = {
    topic: `private-conversation=${userId}`,
    //topic: `private-conversation`,
    message: `Une nouvelle conversation a été créée ${conversationId}`,
  };

  fetch('https://mercure.simschab.cloud/.well-known/mercure', {
    method: 'POST',
    headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': 'Bearer ' + `${TOKEN}`,
        },
    body: `data=${encodeURIComponent(data.message)}&topic=${encodeURIComponent(data.topic)}`,
  })
  .then(response => response.text())
    .then(data => {
        console.log(data);
        
    })
    .catch(error => console.log(error));
}



</script>
{% endblock %}
{% endif %}

