{# ici je peux utiliser une balise template ça s'y prête bien #}
<div id="appendChatBox"></div>

{% if app.user %}
{% block javascripts %}
<script>

// paramètres généraux accèssibles partout
const appUser = {{ app.user.id }};
const appUserName = "{{ app.user.username}}";   
let joinedUserId = null;
let conversationId = null;

let invitationSend = false;
let invitationReceived = false;
let invitationEventSource = null;
let originalConversation = null;
let chatEventSource = null;
let isChatBoxOpen = false;
let conversationFromDataBase = null;


//// appel méthodes

createOnePrivateTopicForEachUser();
listenInvitationEventSourceActions();

////// PARTIE 1 : GESTION DE L'INVITATION & INITIALISATION AFFICHAGE CHATBOX //////

function createOnePrivateTopicForEachUser (){
    
    const usersLinkPrivateTopics = [];

    const connectedUsers = document.querySelectorAll('.connectedUser');
    
    connectedUsers.forEach((user) => {

        const userId = user.getAttribute('data-id');
        const topic = `private-conversation=${userId}`;
        usersLinkPrivateTopics.push(topic);
        
    });

    connectedUsers.forEach((user) => {
        
        user.addEventListener('click', (e) => {
            e.preventDefault();  
            // on lance la conversation avec l'utilisateur cliqué          
            startConversation(user.getAttribute('data-id'));
        });
    });

    const userTopicLink = usersLinkPrivateTopics.filter((topic) => {
        const regex = new RegExp(`^private-conversation=${appUser}$`);
        return regex.test(topic);
    });

    console.log('contenu du tableau de lien de topic de chaque utilisateur : ' + usersLinkPrivateTopics);

    const link = 'https://mercure.simschab.cloud/.well-known/mercure';
    const url = new URL(link);
    url.searchParams.append('topic', `${userTopicLink}`);

    invitationEventSource = new EventSource(url);
}
///
function startConversation(userId) {
    
    // à l'appel de startConversation dans createOnePrivateTopicForEachUser on a récupré l'id de l'utilisateur que lequel on a cliqué    
    
    if (invitationSend === false ) {
        
        fetch('/conversation', {
        method: 'POST',
        body: JSON.stringify({ participants: [ userId ] }),
        headers: {
            'Content-Type': 'application/json'
        }
        })
        .then(response => { 
            return response.json(); // le conversation arrive ici depuis le controller et la bdd
        })
        .then(data => {
            conversation = data.conversation;
            firstChatBoxHydratation(conversation);
            sendInvitation(userId, conversation);
        })
        .catch(error => {
            console.error(error);
        });

            // on passe l'invitationSend à true pour ne pas pouvoir envoyer plusieurs invitations à la fois à un même utilisateur il faut vérifier l'id de l'utilisateur cliqué et l'id de l'utilisateur connecté pour ne pas pouvoir s'inviter soi-même et ne pas pouvoir envoyer plusieurs invitations à un même utilisateur mais autoriser plusieurs invitations à plusieurs utilisateurs différents
            
            invitationSend = true;

    } else {
        console.log('invitation déjà envoyée');
    }

    return
};
///
function sendInvitation(userId, conversation){

    const invitationHubMessage = {
        topic: `private-conversation=${userId}`, 
        // on cible le topic de l'utilisateur cliqué
        message: conversation 
        // on lui envoie la conversation de la bdd qu'on a reçu dans startConversation
    };

    fetch('/ask/conversation', {
    method: 'POST',
    body: JSON.stringify(invitationHubMessage),
    // envoyer le message et le topic pour le publier sur le hub et le diffuser aux abonnés
    })
    .then(response => {
        //console.log(response);
    })
    .then(data => {
        //console.log(data);
    })
    .catch(error => {
        console.error(error);
    });

    joinedUserId = userId;
};
///
function firstChatBoxHydratation (data) {

    // on récupère les données de la conversation initiale
    if(data && data.messages !== undefined){

    // on crée la chatbox dans le DOM
    createDomChatBox();
    isChatBoxOpen = true; //*** ATTENTION ICI A NE PAS BLOQUER UN DES DEUX UTLISATEUR

    let messages = data.messages;

    const chatBoxBody = document.getElementById('chatBoxBody');

    messages.forEach((message) => {

        const span = document.createElement('span');

        span.classList.add('private_message');

            if (message.author.id === appUser) {
                span.style.float = 'right';
                span.style.backgroundColor = '#cbffd6';
            } else {
                span.style.float = 'left';
            }

        // on ajoute les données retournées par Mercure dans la réponse sur le DOM
        span.innerText = `${message.content}`;
        chatBoxBody.appendChild(span, chatBoxBody.lastElementChild); 
    });

        autoScrollBottom();

    }
}
///
function listenInvitationEventSourceActions(){
    console.log('listenInvitationEventSourceActions')
    // controle de l'état de l'eventSource pour réagir aux actions
    
    invitationEventSource.onopen = function(event) {
        console.log('Connection opened. ReadyState = ' + invitationEventSource.readyState);
    };
    invitationEventSource.onmessage = function(event) {
        
        // alert('invitation reçue');
        //console.log('Message received: ' + event.data);

        //*** ICI IL FAUDRA GERER DE CREER UNE CHATBOX PAR CONVERSATION ET DE NE PAS EN CREER PLUSIEURS PAR CONVERSATION ENTRE DEUX MEMES UTILISATEURS. IL FAUDRA DONC GERER LES CONVERSATIONS DANS UN TABLEAU ET LES CHATBOX DANS UN AUTRE TABLEAU ET LES FAIRE CORRESPONDRE AVEC LES ID DES UTILISATEURS CONCERNES PAR LA CONVERSATION PAR EXEMPLE. IL FAUDRA AUSSI GERER LE FAIT DE NE PAS POUVOIR ENVOYER PLUSIEURS INVITATIONS A UN MEME UTILISATEUR ET NE PAS POUVOIR S'INVITER SOI-MEME.

        if(event.data){
            const data = JSON.parse(event.data);
            originalConversation = data.conversation;
            
            // on hydrate la chatbox avec les données de la conversation en cours ou créée si elle est nouvelle elle sera vide et on pourra la remplir avec les messages reçus...

            firstChatBoxHydratation(data.conversation);
        }
    };
    invitationEventSource.onclose = function(event) {
        console.log('Connection closed. ReadyState = ' + invitationEventSource.readyState);
    };
     invitationEventSource.onerror = function(event) {
        console.log('Error: EventSource error occurred. ReadyState = ' + invitationEventSource.readyState);
    };
}
///
function createDomChatBox(){
    // on crée la chatbox
    let chatBox = document.createElement('div');
    let closeChatBox = document.createElement('span');
    let chatBoxBody = document.createElement('div');
    let inputBlock = document.createElement('div');
    let chatBoxInput = document.createElement('input');
    let sendPrivateMessage = document.createElement('button');

    chatBox.setAttribute('id', 'chatBox');
    closeChatBox.setAttribute('id', 'closeChatBox');
    closeChatBox.setAttribute('data-chatbox', 'chatBox'); //dataset
    closeChatBox.innerHTML = 'X';
    chatBoxBody.setAttribute('id', 'chatBoxBody');
    inputBlock.setAttribute('class', 'inputBlock');
    chatBoxInput.setAttribute('id', 'chatBoxInput');
    chatBoxInput.setAttribute('type', 'text');
    sendPrivateMessage.setAttribute('id', 'sendPrivateMessage');
    sendPrivateMessage.setAttribute('class', 'btn btn-sm btn-success');
    sendPrivateMessage.setAttribute('type', 'submit');
    sendPrivateMessage.innerHTML = 'Send';

    inputBlock.appendChild(chatBoxInput);
    inputBlock.appendChild(sendPrivateMessage);
    chatBox.appendChild(closeChatBox);
    chatBox.appendChild(chatBoxBody);
    chatBox.appendChild(inputBlock);

    document.getElementById('appendChatBox').appendChild(chatBox)
}
function autoScrollBottom()
{
    const chatBoxBody = document.getElementById('chatBoxBody');
    chatBoxBody.lastElementChild === null ? false : chatBoxBody.lastElementChild.scrollIntoView({behavior: 'smooth', block: 'end'});
    
}
/////// PARIE 2 GESTION DE LA CONVERSATION & MISE A JOUR DE LA CHATBOX ///////

function conversationPublish(conversation) {

    console.log('publish');

    const otherUserId = conversation.users.find( user => parseInt(user.id) !== sessionUserId);
    const conversationId = conversation.id;
    
    document.getElementById('sendPrivateMessage').addEventListener('click', (e) => {

        console.log('click');

        e.preventDefault();
        // on récupère le contenu du message dans l'input
        const message = document.getElementById('chatBoxInput').value;

        // TODO gèrer si le message est vide ajouter un message d'erreur dans une div
        
        const data = {  
            topic: encodeURIComponent(`conversation/${conversationId}`),
            message: `${message}`,
            conversation_id: `${conversationId}`,
            author_id: parseInt(appUser),
        };
        
        fetch('/publish/private', {
            method: 'POST',
            body: JSON.stringify(data),
        })
        .then(response => response.text())
        .then(data => {
            console.log('Message privé envoyé');
            console.log(data);
            document.getElementById('chatBoxInput').value = '';
        })
        .catch(error => {
            console.error(error);
        });
    });
};


</script>
{% endblock %}
{% endif %}

