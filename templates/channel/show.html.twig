{% extends 'base.html.twig' %}

{% block title %}Channel{% endblock %}

{% block body %}
    
    <div class="date">
    <h1>Canal : {{ channel.name }}</h1>
        <h5>Date de création - {{ channel.createdAt ? channel.createdAt | format_datetime('short', 'none', locale='fr') : '' }}</h5>
    </div>

    <div class="btn-group" role="group" data-toggle="buttons">
        <a href="{{ path('app_channel_index') }}" style="margin-right: 5px;"><button type="button" class="btn btn-primary">Canaux</button></a>
        <a href="{{ path('app_channel_edit', {'id': channel.id}) }}" style="margin-right: 5px;"><button class="btn btn-primary">Modifier</button></a>
        {{ include('channel/_delete_form.html.twig') }}
    </div>
<hr>
    <div>
        <h2>Messages</h2>
        <p>Messages du channel {{ channel.name }}</p>
    </div>

    <div id="messages">
    {% for message in channel.messages %}
        {% if message.channel.id == channel.id %}
            {% set style = message.author.username == app.user.username ? '#86b7b5' : '#4f6a69' %}
            {% set float_side = message.author.username == app.user.username ? 'right' : 'left' %}
            <div class="message" style="background-color: {{ style }}; float: {{ float_side }}; ">
                {{ message.author.username }} - {{ message.content }}
            </div>
        {% endif %}
    {% endfor %}
    </div>
<hr>
    {{ include('_fragments/_messageForm.html.twig') }}

{% block javascript %}
<script>

/////////////////////////////////////////********* SUB ************////////////////////////////////////////////

// On crée un nouvel objet EventSource, qui va se connecter au hub Mercure
const link = 'https://mercure.simschab.cloud/.well-known/mercure';

const url = new URL(link);
url.searchParams.append('topic', encodeURIComponent("chat/{{ channel.id }}"));

const eventSource = new EventSource(url);

eventSource.onmessage = e => { 
    const messages = document.getElementById('messages');
    const div = document.createElement('div');
    // on récupère le message et on le parse en JSON pour pouvoir l'afficher dans le DOM.
    const data = JSON.parse(e.data);
    div.textContent = data.author + ' - ' + data.message;
    div.classList.add('message');
    div.style.float = data.author == '{{ app.user.username }}' ? 'right' : 'left';
    data.author == '{{ app.user.username }}' ? div.style.backgroundColor = '#86b7b5' : div.style.backgroundColor = '#4f6a69';
    messages.appendChild(div);
    messages.lastElementChild.scrollIntoView({behavior: 'smooth', block: 'end'});
};

/////////////////////////////////////////********* PUB ************////////////////////////////////////////////

// On prépare l'envoi d'un message
const sbmtbtn = document.getElementById('submitBtn');
const submitToBack = document.getElementById('submitToBack');
const dataText = document.getElementById('message_content');
const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiKiJdLCJzdWJzY3JpYmUiOlsiKiJdfX0.nINXJPMGL7u4vvquYYm3zgMosrqrxTSooTs7R_OJLZA'

// on créer un objet data qui contient le topic et le message

const data = {
    topic: encodeURIComponent("chat/{{ channel.id }}"),
    message: '',
    channel_id: '{{ channel.id }}',
    author: '{{ app.user.username }}',
    author_id: '{{ app.user.id }}'
}

// envoir le message au controller Front To Back
submitToBack.addEventListener('click', (e) => {
    
    e.preventDefault();
    
    // on met à jour l'objet data avec le message saisi
    data.message = dataText.value;
    
    // on vérifie que le message n'est pas vide
    if (data.message == '') {
        // get .errors div and add error message to it on a smooth fade in and fade out
        const errors = document.querySelector('.errors');
        errors.style.display = 'block';
        errors.innerHTML = '<div class="alert alert-danger" role="alert">Le message ne peut pas être vide</div>';
        setTimeout(() => {
            errors.innerHTML = '';
        }, 3000);
    return;
    }

    // check illegal characters
    if (dataText.value.match(/[^a-zA-Z0-9 ]/)) {
        alert('Please enter a valid message');
        return;
    } 

    // on envoie le message au hub
    fetch('/publish', {
        method: 'POST',
        body: JSON.stringify(data) 
     })
    .then(response => response.text())
    .then(data => {
        console.log(data);
        // on vide le champ de saisie
        dataText.value = '';
    })
    .catch(error => console.log(error));
});

/////////////////////////////////////////********* INIT SCROLL ************////////////////////////////////////////////

{# document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight; #}

// messages est l'élément DOM de la liste de messages et lastElementChild est le dernier enfant de cet élément, c'est-à-dire la dernière div de message ajoutée.
// behavior spécifie le type de transition à utiliser pour le scroll, avec la valeur 'smooth' pour un scroll doux.
// block spécifie l'alignement vertical de l'élément dans la fenêtre d'affichage, avec la valeur 'end' pour aligner le bas de l'élément avec le bas de la fenêtre.

messages.lastElementChild.scrollIntoView({behavior: 'smooth', block: 'end'});

</script>
{% endblock %}

{% endblock %}
