{% extends 'base.html.twig' %}

{% block title %}Home{% endblock %}

{% block body %}
<div class="container">
    <h1>Home</h1>
</div>

<div class="container">
<ul id="messages"></ul>
</div>

<div class="container">
    <form action="">
        <fieldset>
        <legend>Message vers Mercure Hub & Retour en SSE</legend>
        <input type="text" id="dataText">
        <br>
        <small>Envoyer vers mercure hub...</small>
        </fieldset>
        <button id="submitBtn" class="btn btn-success" type="submit">Envoyer</button>
        <button id="submitToBack" class="btn btn-info" type="submit">Envoyer au controller</button>
    </form>
</div>

{% block javascript %}
<script>

// On crée un nouvel objet EventSource, qui va se connecter au hub Mercure
const link = 'https://mercure.simschab.cloud/.well-known/mercure';
const url = new URL(link);
url.searchParams.append('topic', 'montopic');
url.searchParams.append('topic', 'montopicfront');
const eventSource = new EventSource(url);

// On écoute les messages reçus du hub
eventSource.onmessage = e => {
    console.log(e.data);
    // on fait ce qu'on veut avec le message reçu du hub
    const li = document.createElement('li');
    // remove "data:" and "data:";charset=utf-8," from beginning of string
    li.textContent = e.data;
    document.getElementById('messages').appendChild(li);
};

// On prépare l'envoi d'un message
const sbmtbtn = document.getElementById('submitBtn');
const submitToBack = document.getElementById('submitToBack');
const dataText = document.getElementById('dataText');
const TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InB1Ymxpc2giOlsiKiJdLCJzdWJzY3JpYmUiOlsiKiJdfX0.nINXJPMGL7u4vvquYYm3zgMosrqrxTSooTs7R_OJLZA'


// on créer un objet data qui contient le topic et le message
const data = {
    topic: 'montopicfront',
    mesage: dataText.value
}

// on soumet le formulaire
sbmtbtn.addEventListener('click', (e) => {
    e.preventDefault();
    // on envoie le message au hub
    fetch('https://mercure.simschab.cloud/.well-known/mercure', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': 'Bearer ' + `${TOKEN}` // inclure le cookie d'authentification dans l'en-tête Authorization si on ne passe pas par le backend
                                                    // car en front on n'accède pas au token défini dans la configuration du hub dans le backend
        },
        // on encode le message et le topic en JSON dans le corps de la requête sur des clés data et topic
        // en utilisant:  encodeURIComponent(...) on encode les caractères spéciaux si il y en a
        // comme ça on est sur que les valeurs des paramètres sont correctement encodés et envoyés en tant que données de formulaire URL-encodées valides.
        // même si ici c'est pas nécessaire car on envoie pas de caractères spéciaux.
        // infos : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
        body: `data=${encodeURIComponent(dataText.value)}&topic=${encodeURIComponent(data.topic)}` // envoyer le message et le topic pour le publier sur le hub et le diffuser aux abonnés
    })
    .then(response => response.text())
    .then(data => {
        console.log(data);
    })
    .catch(error => console.log(error));
});


// envoir le message au controller Front To Back
submitToBack.addEventListener('click', (e) => {
    e.preventDefault();
    // on envoie le message au hub
    fetch('/publish', {
        method: 'POST',
        body: JSON.stringify(dataText.value)
     })
    .then(response => response.text())
    .then(data => {
        console.log(data);
        // on vide le champ de saisie
        dataText.value = '';
    })
    .catch(error => console.log(error));
});

</script>
{% endblock %}

{% endblock %}
